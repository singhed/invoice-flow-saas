// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - represents users of the system
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  passwordHash String
  role         UserRole @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  clients      Client[]
  projects     Project[]
  timeEntries  TimeEntry[]
  invoices     Invoice[]
  expenses     Expense[]
  reminders    Reminder[]
  integrations Integration[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
  VIEWER
}

// Client model - represents clients/customers
model Client {
  id        String       @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  taxId     String?
  notes     String?
  status    ClientStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]
  invoices Invoice[]

  @@index([userId])
  @@index([status])
  @@map("clients")
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

// Project model - represents projects for clients
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  hourlyRate  Decimal       @db.Decimal(10, 2)
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  clientId    String
  userId      String

  client           Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries      TimeEntry[]
  invoiceLineItems InvoiceLineItem[]

  @@index([clientId])
  @@index([userId])
  @@index([status])
  @@map("projects")
}

enum ProjectStatus {
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

// TimeEntry model - tracks time spent on projects
model TimeEntry {
  id                String    @id @default(cuid())
  description       String
  startTime         DateTime
  endTime           DateTime?
  duration          Int? // Duration in minutes
  isBillable        Boolean   @default(true)
  invoiced          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  projectId         String
  userId            String
  invoiceLineItemId String?

  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoiceLineItem InvoiceLineItem? @relation(fields: [invoiceLineItemId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([invoiced])
  @@index([startTime])
  @@map("time_entries")
}

// Invoice model - represents invoices sent to clients
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  status        InvoiceStatus @default(DRAFT)
  subtotal      Decimal       @db.Decimal(10, 2)
  taxRate       Decimal       @default(0) @db.Decimal(5, 2)
  taxAmount     Decimal       @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  notes         String?
  terms         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  clientId      String
  userId        String

  client    Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  lineItems InvoiceLineItem[]
  payments  Payment[]
  reminders Reminder[]

  @@index([clientId])
  @@index([userId])
  @@index([status])
  @@index([dueDate])
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

// InvoiceLineItem model - line items on invoices
model InvoiceLineItem {
  id          String   @id @default(cuid())
  description String
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(10, 2)
  amount      Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoiceId   String
  projectId   String?

  invoice     Invoice     @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)
  timeEntries TimeEntry[]

  @@index([invoiceId])
  @@index([projectId])
  @@map("invoice_line_items")
}

// Payment model - tracks payments received for invoices
model Payment {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod
  transactionId String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  invoiceId     String

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([paymentDate])
  @@map("payments")
}

enum PaymentMethod {
  CASH
  CHECK
  BANK_TRANSFER
  CREDIT_CARD
  PAYPAL
  STRIPE
  OTHER
}

// ExpenseCategory model - categories for expenses
model ExpenseCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  expenses Expense[]

  @@map("expense_categories")
}

// Expense model - tracks business expenses
model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Decimal  @db.Decimal(10, 2)
  expenseDate DateTime @default(now())
  vendor      String?
  receipt     String? // URL or file path to receipt
  isBillable  Boolean  @default(false)
  invoiced    Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String
  userId      String

  category ExpenseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([userId])
  @@index([expenseDate])
  @@index([invoiced])
  @@map("expenses")
}

// Reminder model - tracks reminders for invoices
model Reminder {
  id           String       @id @default(cuid())
  reminderDate DateTime
  reminderType ReminderType
  message      String?
  sent         Boolean      @default(false)
  sentAt       DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  invoiceId    String
  userId       String

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([userId])
  @@index([reminderDate])
  @@index([sent])
  @@map("reminders")
}

enum ReminderType {
  PAYMENT_DUE
  PAYMENT_OVERDUE
  INVOICE_SENT
  CUSTOM
}

// Integration model - tracks third-party integrations
model Integration {
  id                String              @id @default(cuid())
  provider          IntegrationProvider
  providerAccountId String?
  accessToken       String?
  refreshToken      String?
  tokenExpiresAt    DateTime?
  config            Json? // Store provider-specific configuration
  status            IntegrationStatus   @default(ACTIVE)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userId            String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
  @@map("integrations")
}

enum IntegrationProvider {
  STRIPE
  PAYPAL
  QUICKBOOKS
  XERO
  GOOGLE_CALENDAR
  SLACK
  ZAPIER
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
}

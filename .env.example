# SECURITY WARNING
# DO NOT use these example values in production!
# Generate secure random secrets with: openssl rand -hex 32

# Shared configuration
APP_ENV=development

# JWT Secrets (REQUIRED - Must be 32+ characters, cryptographically random)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=REPLACE_WITH_SECURE_RANDOM_VALUE_MIN_32_CHARS
REFRESH_TOKEN_SECRET=REPLACE_WITH_DIFFERENT_SECURE_RANDOM_VALUE

# Next.js web application
# Public URL for the legacy Go API (used for health check demo)
NEXT_PUBLIC_API_URL=http://localhost:8080
# Public URL for the Node API Gateway (used for authentication)
NEXT_PUBLIC_AUTH_API_URL=http://localhost:3000
# Optional display name for the application shell.
NEXT_PUBLIC_APP_NAME=NextGoMonorepo

# Go API service
# Interface the API server binds to.
API_HOST=0.0.0.0
# Port the API server listens on.
API_PORT=8080
# Comma-separated list of allowed origins for CORS requests.
API_ALLOWED_ORIGINS=http://localhost:3000
# Optional: S3 bucket to store generated report exports
REPORTS_S3_BUCKET=
# Optional: key prefix inside the bucket (e.g., exports/advanced)
REPORTS_S3_PREFIX=
# AWS region (required for S3 when uploading)
AWS_REGION=us-east-1

# API Gateway (Node.js)
PORT=3000
# CORS Configuration (REQUIRED in production - comma-separated list of allowed origins)
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001

# User Service (Node.js)
USER_SERVICE_PORT=3003

# Invoice Service (Node.js)
INVOICE_SERVICE_PORT=3002
AWS_SES_REGION=us-east-1
AWS_SES_FROM_EMAIL=care@yourstore.com
AWS_SES_ACCESS_KEY_ID=
AWS_SES_SECRET_ACCESS_KEY=
SHOPIFY_STORE_DOMAIN=your-store.myshopify.com
SHOPIFY_ACCESS_TOKEN=
SHOPIFY_API_VERSION=2023-10
COMPANY_LEGAL_NAME=Shopify Invoice Studio
COMPANY_SUPPORT_EMAIL=caring@yourstore.com
COMPANY_POSTAL_ADDRESS=123 Commerce Ave, Toronto, ON, Canada
INVOICE_DEFAULT_CURRENCY=USD

# Payment Service (Node.js)
PAYMENT_SERVICE_PORT=3004
PAYMENT_DEFAULT_CURRENCY=USD
PAYMENT_RECONCILIATION_HOLD_HOURS=24
PAYMENT_MAX_PAGE_SIZE=100

# Database Configuration (REQUIRED)
# For production, use strong passwords: openssl rand -base64 32
POSTGRES_USER=invoice_app_user
POSTGRES_PASSWORD=REPLACE_WITH_STRONG_PASSWORD
POSTGRES_DB=invoicedb
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB}

# Redis Configuration (REQUIRED for production)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=REPLACE_WITH_STRONG_PASSWORD
# Redis Cluster Mode (optional - for high availability)
REDIS_CLUSTER=false
# Redis Cluster Nodes (JSON array - required if REDIS_CLUSTER=true)
# REDIS_CLUSTER_NODES='[{"host":"node1.redis.com","port":6379},{"host":"node2.redis.com","port":6379}]'
# Redis Sentinel Configuration (optional - for automatic failover)
# REDIS_SENTINELS='[{"host":"sentinel1.redis.com","port":26379},{"host":"sentinel2.redis.com","port":26379}]'
# REDIS_SENTINEL_NAME=mymaster
# Cache TTL (seconds)
CACHE_TTL=300

# Multi-Region Database Configuration (optional - for disaster recovery)
# Primary Database (main write endpoint)
DB_PRIMARY_HOST=prod-invoice-saas-primary.cluster-xxx.us-east-1.rds.amazonaws.com
DB_PRIMARY_PORT=5432
# Read Replicas (for read scaling)
DB_REPLICA_1_HOST=prod-invoice-saas-primary-reader-1.cluster-xxx.us-east-1.rds.amazonaws.com
DB_REPLICA_2_HOST=prod-invoice-saas-primary-reader-2.cluster-xxx.us-east-1.rds.amazonaws.com
# Secondary Region (for disaster recovery)
DB_SECONDARY_HOST=prod-invoice-saas-secondary.cluster-xxx.us-west-2.rds.amazonaws.com
DB_SECONDARY_REPLICA_1_HOST=prod-invoice-saas-secondary-reader-1.cluster-xxx.us-west-2.rds.amazonaws.com
# Database Credentials
DB_USER=invoice_app_user
DB_PASSWORD=REPLACE_WITH_STRONG_PASSWORD
DB_NAME=invoice_saas

# Analytics Service
ANALYTICS_SERVICE_PORT=3007

# Search Service
SEARCH_SERVICE_PORT=3008

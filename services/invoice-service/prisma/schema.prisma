// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         String    @default("user")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  invoices     Invoice[]

  @@map("users")
}

model Invoice {
  id            String        @id @default(uuid())
  userId        String        @map("user_id")
  invoiceNumber String        @unique @map("invoice_number")
  clientName    String        @map("client_name")
  clientEmail   String        @map("client_email")
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  status        InvoiceStatus @default(DRAFT)
  dueDate       DateTime      @map("due_date")
  pdfUrl        String?       @map("pdf_url")
  notes         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         InvoiceItem[]
  payments      Payment[]

  @@index([userId])
  @@index([status])
  @@index([invoiceNumber])
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String   @map("invoice_id")
  description String
  quantity    Int
  unitPrice   Decimal  @map("unit_price") @db.Decimal(10, 2)
  total       Decimal  @db.Decimal(10, 2)
  
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@map("invoice_items")
}

model Payment {
  id             String        @id @default(uuid())
  invoiceId      String        @map("invoice_id")
  amount         Decimal       @db.Decimal(10, 2)
  paymentMethod  String?       @map("payment_method")
  transactionId  String?       @unique @map("transaction_id")
  status         PaymentStatus @default(PENDING)
  paidAt         DateTime?     @map("paid_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  
  invoice        Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([transactionId])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

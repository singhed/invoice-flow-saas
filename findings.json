[
  {
    "id": "SAST-001",
    "file": "services/api-gateway/src/middleware/auth.ts",
    "path": "/home/engine/project/services/api-gateway/src/middleware/auth.ts",
    "line_start": 5,
    "line_end": 5,
    "vuln_type": "SAST",
    "title": "Insecure default JWT secret (hard-coded fallback)",
    "description": "The JWT secret falls back to a hard-coded default string when the environment variable is missing. This can allow token forgery in non-production environments that accidentally ship to production or during misconfiguration.",
    "evidence": "const JWT_SECRET = process.env.JWT_SECRET || 'REDACTED';",
    "severity": "High",
    "cvss": null,
    "cwe": "CWE-798",
    "exploitability": "High",
    "recommended_fix": "Do not provide a hard-coded fallback secret. Require JWT_SECRET to be set and fail fast if missing.",
    "recommended_change_diff": "diff --git a/services/api-gateway/src/middleware/auth.ts b/services/api-gateway/src/middleware/auth.ts\n--- a/services/api-gateway/src/middleware/auth.ts\n+++ b/services/api-gateway/src/middleware/auth.ts\n@@ -3,7 +3,12 @@\n import jwt from 'jsonwebtoken';\n import { UnauthorizedError } from '@invoice-saas/shared';\n-const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n+const JWT_SECRET = process.env.JWT_SECRET;\n+if (!JWT_SECRET) {\n+  // Fail fast on misconfiguration\n+  throw new Error('Missing JWT_SECRET environment variable');\n+}\n ",
    "confidence": "High"
  },
  {
    "id": "SAST-002",
    "file": "services/api-gateway/src/middleware/auth.ts",
    "path": "/home/engine/project/services/api-gateway/src/middleware/auth.ts",
    "line_start": 33,
    "line_end": 38,
    "vuln_type": "SAST",
    "title": "JWT verification without explicit algorithm whitelist",
    "description": "jwt.verify is called without specifying allowed algorithms. While modern jsonwebtoken defaults are safer, explicitly whitelisting algorithms reduces risk of algorithm confusion or misconfiguration.",
    "evidence": "const decoded = jwt.verify(token, JWT_SECRET) as { id: string; email: string; role: string; };",
    "severity": "Medium",
    "cvss": null,
    "cwe": "CWE-347",
    "exploitability": "Medium",
    "recommended_fix": "Pass an explicit algorithms whitelist to jwt.verify, e.g., { algorithms: ['HS256'] } or your chosen algorithm.",
    "recommended_change_diff": "diff --git a/services/api-gateway/src/middleware/auth.ts b/services/api-gateway/src/middleware/auth.ts\n--- a/services/api-gateway/src/middleware/auth.ts\n+++ b/services/api-gateway/src/middleware/auth.ts\n@@ -31,10 +31,10 @@\n   const token = authHeader.substring(7);\n \n   try {\n-    const decoded = jwt.verify(token, JWT_SECRET) as {\n+    const decoded = jwt.verify(token, JWT_SECRET, { algorithms: ['HS256'] }) as {\n       id: string;\n       email: string;\n       role: string;\n     };\n ",
    "confidence": "High"
  },
  {
    "id": "CONFIG-001",
    "file": "services/api-gateway/src/index.ts",
    "path": "/home/engine/project/services/api-gateway/src/index.ts",
    "line_start": 17,
    "line_end": 21,
    "vuln_type": "SAST",
    "title": "Overly permissive CORS default ('*') with credentials",
    "description": "CORS is configured to allow '*' when ALLOWED_ORIGINS is unset. Combining wildcard origins with credentials is insecure and can lead to token leakage.",
    "evidence": "app.use(cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(',') || '*',\n  credentials: true,\n}));",
    "severity": "High",
    "cvss": null,
    "cwe": "CWE-942",
    "exploitability": "High",
    "recommended_fix": "Use a strict origin allowlist function and avoid '*' when credentials are enabled.",
    "recommended_change_diff": "diff --git a/services/api-gateway/src/index.ts b/services/api-gateway/src/index.ts\n--- a/services/api-gateway/src/index.ts\n+++ b/services/api-gateway/src/index.ts\n@@ -15,10 +15,22 @@\n const app = express();\n const PORT = process.env.PORT || 3000;\n \n-app.use(cors({\n-  origin: process.env.ALLOWED_ORIGINS?.split(',') || '*',\n-  credentials: true,\n-}));\n+const allowedOrigins = (process.env.ALLOWED_ORIGINS || '')\n+  .split(',')\n+  .map(o => o.trim())\n+  .filter(Boolean);\n+\n+app.use(cors({\n+  origin: (origin, callback) => {\n+    if (!origin) return callback(null, true);\n+    if (allowedOrigins.includes(origin)) return callback(null, true);\n+    return callback(new Error('Not allowed by CORS'));\n+  },\n+  credentials: true,\n+}));\n ",
    "confidence": "High"
  },
  {
    "id": "SAST-003",
    "file": "scripts/test-runner.sh",
    "path": "/home/engine/project/scripts/test-runner.sh",
    "line_start": 28,
    "line_end": 28,
    "vuln_type": "SAST",
    "title": "Use of eval in shell script allows potential command injection",
    "description": "The test runner uses eval to execute commands, which can be dangerous if inputs are ever user-controlled. Even if currently internal, avoid eval by executing commands directly.",
    "evidence": "if eval \"$test_command\" > \"$LOG_DIR/${test_name}_${retry}.log\" 2>&1; then",
    "severity": "Medium",
    "cvss": null,
    "cwe": "CWE-78",
    "exploitability": "Medium",
    "recommended_fix": "Avoid eval; run the command via bash -c with pipefail or execute array-form commands directly.",
    "recommended_change_diff": "diff --git a/scripts/test-runner.sh b/scripts/test-runner.sh\n--- a/scripts/test-runner.sh\n+++ b/scripts/test-runner.sh\n@@ -25,7 +25,7 @@\n         fi\n         \n-        if eval \"$test_command\" > \"$LOG_DIR/${test_name}_${retry}.log\" 2>&1; then\n+        if bash -o pipefail -c \"$test_command\" > \"$LOG_DIR/${test_name}_${retry}.log\" 2>&1; then\n             log_message \"âœ“ PASSED: $test_name\"\n             return 0\n         else\n ",
    "confidence": "High"
  },
  {
    "id": "SECRET-001",
    "file": "infrastructure/kubernetes/base/secrets.yaml",
    "path": "/home/engine/project/infrastructure/kubernetes/base/secrets.yaml",
    "line_start": 7,
    "line_end": 33,
    "vuln_type": "Secret",
    "title": "Kubernetes Secrets committed in plaintext",
    "description": "Kubernetes Secret manifests with plaintext values are committed to the repository, including database credentials and JWT secret placeholders. Secrets should not live in source control.",
    "evidence": "stringData:\n  jwt-secret: \"REDACTED\"\n  username: \"REDACTED\"\n  password: \"REDACTED\"\n  url: \"postgresql://REDACTED:REDACTED@REDACTED:5432/invoicedb\"",
    "severity": "High",
    "cvss": null,
    "cwe": "CWE-359",
    "exploitability": "High",
    "recommended_fix": "Remove Secrets from Git. Use external secret management (AWS Secrets Manager + External Secrets operator or sealed secrets). If kept, use templates only and inject at deploy time.",
    "recommended_change_diff": "diff --git a/infrastructure/kubernetes/base/kustomization.yaml b/infrastructure/kubernetes/base/kustomization.yaml\n--- a/infrastructure/kubernetes/base/kustomization.yaml\n+++ b/infrastructure/kubernetes/base/kustomization.yaml\n@@ -6,10 +6,9 @@\n resources:\n   - namespace.yaml\n-  - secrets.yaml\n   - configmap.yaml\n   - api-gateway-deployment.yaml\n   - invoice-service-deployment.yaml\n ",
    "confidence": "High"
  },
  {
    "id": "CONFIG-003",
    "file": "infrastructure/terraform/modules/eks/main.tf",
    "path": "/home/engine/project/infrastructure/terraform/modules/eks/main.tf",
    "line_start": 108,
    "line_end": 128,
    "vuln_type": "Config",
    "title": "Overly permissive IAM policy for EKS nodes (Resource '*', Actions '*')",
    "description": "The node group additional IAM policy permits broad actions on S3, SQS, and SNS for all resources. This violates least privilege and increases blast radius.",
    "evidence": "Action = [\n  \"sqs:*\",\n  \"sns:*\",\n  \"s3:*\"\n]\nResource = \"*\"",
    "severity": "Critical",
    "cvss": null,
    "cwe": "CWE-732",
    "exploitability": "High",
    "recommended_fix": "Restrict to least-privilege actions and specific ARNs (e.g., S3 GetObject/PutObject/ListBucket on the invoices bucket; SQS SendMessage/ReceiveMessage on specific queues; SNS Publish on specific topics).",
    "recommended_change_diff": "diff --git a/infrastructure/terraform/modules/eks/main.tf b/infrastructure/terraform/modules/eks/main.tf\n--- a/infrastructure/terraform/modules/eks/main.tf\n+++ b/infrastructure/terraform/modules/eks/main.tf\n@@ -115,13 +115,20 @@\n-        Action = [\n-          \"sqs:*\",\n-          \"sns:*\",\n-          \"s3:*\",\n-          \"secretsmanager:GetSecretValue\",\n-          \"secretsmanager:DescribeSecret\"\n-        ]\n-        Resource = \"*\"\n+        Action = [\n+          \"sqs:SendMessage\", \"sqs:ReceiveMessage\", \"sqs:DeleteMessage\",\n+          \"sns:Publish\",\n+          \"s3:GetObject\", \"s3:PutObject\", \"s3:ListBucket\",\n+          \"secretsmanager:GetSecretValue\", \"secretsmanager:DescribeSecret\"\n+        ]\n+        Resource = [\n+          \"arn:aws:s3:::${var.project_name}-${var.environment}-invoices\",\n+          \"arn:aws:s3:::${var.project_name}-${var.environment}-invoices/*\",\n+          \"arn:aws:sqs:*:*:${var.project_name}-${var.environment}-*\",\n+          \"arn:aws:sns:*:*:${var.project_name}-${var.environment}-*\"\n+        ]\n       }\n     ]\n   })\n ",
    "confidence": "High"
  },
  {
    "id": "CONFIG-004",
    "file": "infrastructure/terraform/modules/s3/main.tf",
    "path": "/home/engine/project/infrastructure/terraform/modules/s3/main.tf",
    "line_start": 81,
    "line_end": 107,
    "vuln_type": "Config",
    "title": "S3 bucket policy allows any AWS principal full access",
    "description": "The bucket policy principal is set to '*' and permits read/write/list operations. This effectively makes the bucket accessible by any AWS principal, which is a critical misconfiguration.",
    "evidence": "\"Principal\": { \n  \"AWS\": \"*\"\n}\nAction: [\"s3:GetObject\", \"s3:PutObject\", \"s3:DeleteObject\", \"s3:ListBucket\"]",
    "severity": "Critical",
    "cvss": null,
    "cwe": "CWE-284",
    "exploitability": "High",
    "recommended_fix": "Restrict Principal to specific IAM roles or add conditions limiting access (e.g., same account, VPC endpoint). Prefer IAM policies attached to roles over bucket policies where possible.",
    "recommended_change_diff": null,
    "confidence": "High"
  },
  {
    "id": "CONFIG-005",
    "file": "infrastructure/terraform/modules/eks/main.tf",
    "path": "/home/engine/project/infrastructure/terraform/modules/eks/main.tf",
    "line_start": 55,
    "line_end": 60,
    "vuln_type": "Config",
    "title": "EKS cluster endpoint publicly accessible",
    "description": "endpoint_public_access is set to true. Publicly accessible control planes increase exposure. If not required, disable or restrict to specific CIDRs.",
    "evidence": "endpoint_public_access  = true",
    "severity": "Medium",
    "cvss": null,
    "cwe": "CWE-668",
    "exploitability": "Medium",
    "recommended_fix": "Disable public access or add public_access_cidrs to restrict to management networks.",
    "recommended_change_diff": "diff --git a/infrastructure/terraform/modules/eks/main.tf b/infrastructure/terraform/modules/eks/main.tf\n--- a/infrastructure/terraform/modules/eks/main.tf\n+++ b/infrastructure/terraform/modules/eks/main.tf\n@@ -56,7 +56,8 @@\n   vpc_config {\n     subnet_ids              = var.private_subnet_ids\n     endpoint_private_access = true\n-    endpoint_public_access  = true\n+    endpoint_public_access  = false\n+    # or set public_access_cidrs = [\"x.x.x.x/32\"] when public access is required\n     security_group_ids      = [aws_security_group.cluster.id]\n   }\n ",
    "confidence": "High"
  },
  {
    "id": "CONFIG-006",
    "file": "infrastructure/terraform/modules/s3/main.tf",
    "path": "/home/engine/project/infrastructure/terraform/modules/s3/main.tf",
    "line_start": 69,
    "line_end": 79,
    "vuln_type": "Config",
    "title": "S3 CORS allows all origins",
    "description": "The bucket CORS configuration allows requests from any origin. This may be acceptable for public assets but should be restricted to known domains when dealing with sensitive files.",
    "evidence": "allowed_origins = [\"*\"]",
    "severity": "Medium",
    "cvss": null,
    "cwe": "CWE-942",
    "exploitability": "Medium",
    "recommended_fix": "Restrict allowed_origins to specific frontend domains.",
    "recommended_change_diff": "diff --git a/infrastructure/terraform/modules/s3/main.tf b/infrastructure/terraform/modules/s3/main.tf\n--- a/infrastructure/terraform/modules/s3/main.tf\n+++ b/infrastructure/terraform/modules/s3/main.tf\n@@ -72,7 +72,7 @@\n   cors_rule {\n     allowed_headers = [\"*\"]\n     allowed_methods = [\"GET\", \"PUT\", \"POST\"]\n-    allowed_origins = [\"*\"]\n+    allowed_origins = [\"https://app.example.com\"]\n     expose_headers  = [\"ETag\"]\n     max_age_seconds = 3000\n   }\n ",
    "confidence": "High"
  },
  {
    "id": "SCA-001",
    "file": "pnpm-lock.yaml",
    "path": "/home/engine/project/pnpm-lock.yaml",
    "line_start": 2165,
    "line_end": 2169,
    "vuln_type": "SCA",
    "title": "json5@1.0.2 vulnerable to Prototype Pollution (CVE-2022-46175) [Unverified]",
    "description": "A vulnerable version of json5 is present transitively. CVE-2022-46175 allows prototype pollution via crafted JSON5 input. This is likely a dev-only dependency via eslint/prettier but should be upgraded.",
    "evidence": "  /json5@1.0.2:\n    dependencies:\n      minimist: 1.2.8",
    "severity": "High",
    "cvss": "7.5 [Unverified]",
    "cwe": "CWE-1321",
    "exploitability": "Medium",
    "recommended_fix": "Upgrade dependencies pulling json5 to >=2.2.3, or add a resolution override to force a safe version: { \"resolutions\": { \"json5\": \"^2.2.3\" } }.",
    "recommended_change_diff": null,
    "confidence": "Medium"
  },
  {
    "id": "SCA-002",
    "file": "services/api-gateway/package.json",
    "path": "/home/engine/project/services/api-gateway/package.json",
    "line_start": 24,
    "line_end": 28,
    "vuln_type": "SCA",
    "title": "swagger-ui-express@5.0.0 potential XSS advisories [Unverified]",
    "description": "swagger-ui has had XSS issues historically. Ensure using the latest swagger-ui-express and swagger-ui versions.",
    "evidence": "\"swagger-ui-express\": \"^5.0.0\"",
    "severity": "Medium",
    "cvss": null,
    "cwe": "CWE-79",
    "exploitability": "Low",
    "recommended_fix": "Upgrade swagger-ui-express to the latest patch/minor (e.g., ^5.0.1 or newer) and verify associated swagger-ui dependency is patched.",
    "recommended_change_diff": null,
    "confidence": "Low"
  },
  {
    "id": "SCA-003",
    "file": "services/api-gateway/package.json",
    "path": "/home/engine/project/services/api-gateway/package.json",
    "line_start": 25,
    "line_end": 27,
    "vuln_type": "SCA",
    "title": "yamljs@0.3.0 potential unsafe YAML parsing [Unverified]",
    "description": "yamljs is outdated; consider switching to maintained libraries (yaml or js-yaml) that address known parsing issues and provide safer defaults.",
    "evidence": "\"yamljs\": \"^0.3.0\"",
    "severity": "Medium",
    "cvss": null,
    "cwe": "CWE-502",
    "exploitability": "Low",
    "recommended_fix": "Replace yamljs with js-yaml@^4.1.0 or yaml@^2.x and use safeLoad-like behavior.",
    "recommended_change_diff": null,
    "confidence": "Low"
  },
  {
    "id": "SCA-004",
    "file": "services/api-gateway/package.json",
    "path": "/home/engine/project/services/api-gateway/package.json",
    "line_start": 23,
    "line_end": 26,
    "vuln_type": "SCA",
    "title": "axios@1.6.2 potential SSRF/proxy-related advisories [Unverified]",
    "description": "Some axios versions have had proxy/redirect-related vulnerabilities. Ensure the latest 1.7.x is used and proxy/redirect handling is configured as needed.",
    "evidence": "\"axios\": \"^1.6.2\"",
    "severity": "Medium",
    "cvss": null,
    "cwe": "CWE-918",
    "exploitability": "Low",
    "recommended_fix": "Upgrade axios to ^1.7.5 (or latest) and consider setting maxRedirects and proxy settings explicitly.",
    "recommended_change_diff": null,
    "confidence": "Low"
  },
  {
    "id": "SCA-005",
    "file": "services/api-gateway/package.json",
    "path": "/home/engine/project/services/api-gateway/package.json",
    "line_start": 18,
    "line_end": 21,
    "vuln_type": "SCA",
    "title": "express@4.18.2 potential ReDoS via path-to-regexp transitive [Unverified]",
    "description": "Express 4.x depends on path-to-regexp 0.1.x which has had ReDoS issues in the past. Consider monitoring advisories or planning upgrade to Express 5.x.",
    "evidence": "\"express\": \"^4.18.2\"",
    "severity": "Low",
    "cvss": null,
    "cwe": "CWE-400",
    "exploitability": "Low",
    "recommended_fix": "Consider migrating to Express 5.x when stable and avoid complex regex routes.",
    "recommended_change_diff": null,
    "confidence": "Low"
  },
  {
    "id": "CONFIG-007",
    "file": "infrastructure/kubernetes/base/api-gateway-deployment.yaml",
    "path": "/home/engine/project/infrastructure/kubernetes/base/api-gateway-deployment.yaml",
    "line_start": 45,
    "line_end": 47,
    "vuln_type": "Config",
    "title": "Kubernetes env ALLOWED_ORIGINS is '*'",
    "description": "ALLOWED_ORIGINS is set to '*', which combined with credentials can cause security issues. Match this with a strict allowlist.",
    "evidence": "- name: ALLOWED_ORIGINS\n  value: \"*\"",
    "severity": "High",
    "cvss": null,
    "cwe": "CWE-942",
    "exploitability": "High",
    "recommended_fix": "Set ALLOWED_ORIGINS to a comma-separated list of trusted origins only.",
    "recommended_change_diff": "diff --git a/infrastructure/kubernetes/base/api-gateway-deployment.yaml b/infrastructure/kubernetes/base/api-gateway-deployment.yaml\n--- a/infrastructure/kubernetes/base/api-gateway-deployment.yaml\n+++ b/infrastructure/kubernetes/base/api-gateway-deployment.yaml\n@@ -43,7 +43,7 @@\n         - name: JWT_SECRET\n           valueFrom:\n             secretKeyRef:\n               name: app-secrets\n               key: jwt-secret\n-        - name: ALLOWED_ORIGINS\n-          value: \"*\"\n+        - name: ALLOWED_ORIGINS\n+          value: \"https://app.example.com,https://admin.example.com\"\n ",
    "confidence": "High"
  },
  {
    "id": "SAST-004",
    "file": "services/api-gateway/src/routes/proxy.ts",
    "path": "/home/engine/project/services/api-gateway/src/routes/proxy.ts",
    "line_start": 25,
    "line_end": 31,
    "vuln_type": "SAST",
    "title": "Potential sensitive data logging in error path",
    "description": "Logging raw error objects from proxied requests can inadvertently include sensitive details. Limit logged fields and avoid request bodies/headers.",
    "evidence": "logger.error('Proxy request failed:', error);",
    "severity": "Low",
    "cvss": null,
    "cwe": "CWE-532",
    "exploitability": "Low",
    "recommended_fix": "Log minimal error metadata (status code, target service) and avoid dumping full objects.",
    "recommended_change_diff": "diff --git a/services/api-gateway/src/routes/proxy.ts b/services/api-gateway/src/routes/proxy.ts\n--- a/services/api-gateway/src/routes/proxy.ts\n+++ b/services/api-gateway/src/routes/proxy.ts\n@@ -23,9 +23,11 @@\n-  } catch (error: any) {\n-    logger.error('Proxy request failed:', error);\n-    res.status(error.response?.status || 500).json({\n+  } catch (error: any) {\n+    logger.error('Proxy request failed', {\n+      method: req.method, path: req.path, targetUrl, status: error.response?.status\n+    });\n+    res.status(error.response?.status || 500).json({\n       status: 'error',\n       message: error.response?.data?.message || 'Service unavailable',\n     });\n   }\n ",
    "confidence": "High"
  },
  {
    "id": "CONFIG-008",
    "file": "docker-compose.yml",
    "path": "/home/engine/project/docker-compose.yml",
    "line_start": 46,
    "line_end": 49,
    "vuln_type": "Config",
    "title": "Localstack container mounts Docker socket",
    "description": "Mounting /var/run/docker.sock grants containers high privileges over the host Docker daemon. Avoid in production and be cautious even in dev.",
    "evidence": "volumes:\n  - /var/run/docker.sock:/var/run/docker.sock",
    "severity": "Low",
    "cvss": null,
    "cwe": "CWE-250",
    "exploitability": "Medium",
    "recommended_fix": "Avoid mounting the Docker socket; use Localstack's recommended integrations or mock services instead.",
    "recommended_change_diff": null,
    "confidence": "High"
  }
]
